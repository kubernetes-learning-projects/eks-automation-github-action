name: eks-automation
on: workflow_dispatch
jobs:
  cluster-deployment:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Check for Existing EKS Clusters
        id: check-cluster
        run: |
          EXISTING_CLUSTERS=$(aws eks list-clusters --region us-west-2 --query "clusters" --output text)
          echo "EXISTING_CLUSTERS=${EXISTING_CLUSTERS}" >> $GITHUB_ENV

      - name: Deploy EKS Cluster
        if: env.EXISTING_CLUSTERS == ''
        run: |
          eksctl create cluster -f eks-cluster.yaml

      - name: EKS Security Group Port
        run: |
            CLUSTER_SECURITY_GROUP_ID=$(aws eks describe-cluster --name test-cluster --query 'cluster.resourcesVpcConfig.clusterSecurityGroupId' --output text)

            # Define the inbound rule parameters
            PROTOCOL="all"
            CIDR="0.0.0.0/0"

            # Authorize inbound traffic to the cluster security group
            aws ec2 authorize-security-group-ingress \
                --group-id "$CLUSTER_SECURITY_GROUP_ID" \
                --protocol "$PROTOCOL" \
                --cidr "$CIDR"

  argocd-deployment:
    needs: cluster-deployment
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: argocd-installation
        run: |
            kubectl create namespace argocd 
            helm install --values argocd-helm-deployment/argocd-values.yaml --namespace argocd 


        