name: eks-automation
on: workflow_dispatch
jobs:
  cluster-deployment:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Check for Existing EKS Clusters
        id: check-cluster
        run: |
          EXISTING_CLUSTERS=$(aws eks list-clusters --region us-west-2 --query "clusters" --output text)
          echo "EXISTING_CLUSTERS=${EXISTING_CLUSTERS}" >> $GITHUB_ENV

      - name: Deploy EKS Cluster
        if: env.EXISTING_CLUSTERS == ''
        run: |
          eksctl create cluster -f eks-cluster.yaml

      - name: EKS Security Group Port
        run: |
          CLUSTER_NAME="test-cluster"
          CLUSTER_SECURITY_GROUP_ID=$(aws eks describe-cluster --name $CLUSTER_NAME --query 'cluster.resourcesVpcConfig.clusterSecurityGroupId' --output text)

          # Define the inbound rule parameters
          PROTOCOL="all"
          CIDR="0.0.0.0/0"

          # Check if the security group rule already exists
          RULE_EXISTS=$(aws ec2 describe-security-groups \
              --group-ids "$CLUSTER_SECURITY_GROUP_ID" \
              --query "SecurityGroups[0].IpPermissions[?IpProtocol=='$PROTOCOL' && IpRanges[?CidrIp=='$CIDR']]" \
              --output text)

          if [ -z "$RULE_EXISTS" ]; then
            echo "Security group rule does not exist, creating rule..."
            aws ec2 authorize-security-group-ingress \
              --group-id "$CLUSTER_SECURITY_GROUP_ID" \
              --protocol "$PROTOCOL" \
              --cidr "$CIDR"
          else
            echo "Security group rule already exists, skipping creation."
          fi
  argocd-deployment:
    needs: cluster-deployment
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --region us-west-2 --name test-cluster

      - name: Argocd Installation
        run: |
            kubectl create namespace argocd 
            helm install --values argocd-helm-deployment/argocd-values.yaml --namespace argocd argocd ./argocd-helm-deployment
