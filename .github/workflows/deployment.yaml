name: EKS Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Install eksctl
      run: |
        sudo apt-get update && sudo apt-get install -y curl
        sudo curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | sudo tar xz -C /usr/local/bin

    - name: Deploy to EKS
      run: eksctl create cluster -f eks-cluster.yaml --without-nodegroup

    - name: Configure kubectl
      run: aws eks update-kubeconfig --name test-cluster --region us-west-2

    - name: IAM user Authorization
      run: eksctl create iamidentitymapping --cluster test-cluster --region=us-west-2 --arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:user/arun --username arun --group system:masters --no-duplicate-arns

    - name: IAM user Auth
      run: eksctl create iamidentitymapping --cluster test-cluster --region=us-west-2 --arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:user/aswin --username aswin --group system:masters --no-duplicate-arns

    - name: Install Kubectl
      run: |
        sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo chmod +x kubectl
        sudo mv kubectl /usr/local/bin

    - name: Delete aws-node daemonset
      run: kubectl delete daemonset -n kube-system aws-node

    - name: Install Calico Plugin CRD
      run: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/tigera-operator.yaml

    - name: Install Calico 
      run: kubectl create -f calico.yaml

    - name: Attach IAM OIDC Provider to the cluster
      run: eksctl utils associate-iam-oidc-provider --region=us-west-2 --cluster=test-cluster --approve

    - name: Get the EKS cluster security group ID
      run: |
        CLUSTER_SECURITY_GROUP_ID=$(aws eks describe-cluster --name test-cluster --query 'cluster.resourcesVpcConfig.clusterSecurityGroupId' --output text)
        PROTOCOL="all"
        CIDR="0.0.0.0/0"
        aws ec2 authorize-security-group-ingress --group-id $CLUSTER_SECURITY_GROUP_ID --protocol $PROTOCOL --cidr $CIDR

    - name: Install boto3
      run: |
        sudo apt update
        sudo apt -y install python3-boto3

    - name: Modify the OIDC issuer ID on the IAM Policy AmazonEKS_EBS_CSI_DriverRole
      run: python3 eks_oidc_trust_policy_updater.py

    # - name: IRSA for EBS CSI Plugin
    #   run: |
    #     eksctl create iamserviceaccount \
    #       --name ebs-csi-controller-sa \
    #       --namespace kube-system \
    #       --cluster test-cluster \
    #       --role-name AmazonEKS_EBS_CSI_DriverRole \
    #       --role-only \
    #       --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
    #       --approve
  
    # - name: Install AWS EBS CSI Driver
    #   run: |
    #     eksctl create addon --name aws-ebs-csi-driver \
    #       --cluster test-cluster \
    #       --service-account-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/AmazonEKS_EBS_CSI_DriverRole --force


    - name: Create a node group
      run: eksctl create nodegroup --cluster test-cluster --node-type t3.medium --max-pods-per-node 100

    - name: Install Helm    
      run: |
        curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
        sudo apt-get install apt-transport-https --yes
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
        sudo apt-get update
        sudo apt-get install helm

    - name: Install argocd
      run: | 
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

